// Generated by CoffeeScript 1.10.0
(function() {
  var Client, Promise, fs, google;

  Promise = require('es6-promise').Promise;

  fs = require('fs');

  google = require('googleapis');

  Client = (function() {
    Client.fromJSON = function(file) {
      var json;
      json = JSON.parse(fs.readFileSync(file, {
        encoding: 'utf-8'
      }));
      return new Client(json.client_email, json.private_key);
    };

    function Client(clientEmail, privateKey) {
      this._json = {
        type: 'service_account',
        client_email: clientEmail,
        private_key: privateKey
      };
      this._authorizedClient = null;
      this._scopes = ['https://www.googleapis.com/auth/analytics', 'https://www.googleapis.com/auth/analytics.readonly'];
    }

    Client.prototype.get = function(arg) {
      var from, metrics, to, viewId;
      viewId = arg.viewId, from = arg.from, to = arg.to, metrics = arg.metrics;
      return this._authorize().then((function(_this) {
        return function(auth) {
          var params;
          params = {
            'auth': auth,
            'ids': 'ga:' + viewId,
            'start-date': from,
            'end-date': to,
            'metrics': metrics.join(',')
          };
          return _this._promisedAnalyticsDataGet(params);
        };
      })(this)).then(function(data) {
        var k, obj, v;
        obj = data.totalsForAllResults;
        return ((function() {
          var results;
          results = [];
          for (k in obj) {
            v = obj[k];
            results.push([k, v]);
          }
          return results;
        })()).reduce(function(o, arg1) {
          var k, v;
          k = arg1[0], v = arg1[1];
          o[k.replace(/^ga:/, '')] = parseInt(v, 10);
          return o;
        }, {});
      });
    };

    Client.prototype._authorize = function() {
      var json, scopes;
      if (this._authorizedClient != null) {
        return Promise.resolve(this._authorizedClient);
      }
      json = this._json;
      scopes = this._scopes;
      return this._promisedFromJSON(json).then(function(client) {
        return client.createScoped(scopes);
      }).then((function(_this) {
        return function(scopedClient) {
          return _this._promisedAuthorize(scopedClient);
        };
      })(this));
    };

    Client.prototype._promisedAuthorize = function(scopedClient) {
      return new Promise(function(resolve, reject) {
        return scopedClient.authorize(function(err) {
          if (err != null) {
            return reject(err);
          }
          return resolve(scopedClient);
        });
      });
    };

    Client.prototype._promisedFromJSON = function(json) {
      return new Promise(function(resolve, reject) {
        return google.auth.fromJSON(json, function(err, client) {
          if (err != null) {
            return reject(err);
          }
          return resolve(client);
        });
      });
    };

    Client.prototype._promisedAnalyticsDataGet = function(params) {
      return new Promise(function(resolve, reject) {
        return google.analytics('v3').data.ga.get(params, function(err, result) {
          if (err != null) {
            return reject(err);
          }
          return resolve(result);
        });
      });
    };

    return Client;

  })();

  module.exports = Client;

}).call(this);
